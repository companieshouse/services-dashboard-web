{% macro addDaysAgo (date) %}
   {% set value = date | daysAgo %}
      {% if value %}
         <br><span class="days-ago">({{ value }})</span>
      {% endif %}
{% endmacro %}

{% macro setLanguage (depTrackLang, gitLang, repo) %}
  {% if (depTrackLang | lower) === (gitLang | lower) %}
    <a href="{{ repo }}">{{ gitLang }}</a>
  {% else %}
    <li><a href="{{ repo }}">{{ gitLang }}</a></li>
    <li>{{ depTrackLang }}</li>
  {% endif %}
{% endmacro %}

{% macro sonarLink(sonarUri, sonarKey, val) %}
    {% if sonarKey %}
        <a class="sonar-link" href="{{ sonarUri }}/dashboard?id={{ sonarKey | urlencode }}">{{val}}</a>
    {% else %}
        {{ val }}
    {% endif %}
{% endmacro %}

{% macro depTrackLink(depTrackUri, metricVal, uuid, arg) %}
    {% if uuid %}
        <a class="deptrack-link" href="{{ depTrackUri }}/projects/{{ uuid }}/{{ arg }}">{{metricVal}}</a>
    {% else %}
        {{ metricVal }}
    {% endif %}
{% endmacro %}

{% macro DepTrackMetrics(depTrackUri, metricVal, metricClass, uuid, arg) %}
    {% if metricVal != 0 %}
         <div class="rounded-number metric-{{ metricClass }}-back">
    {% else %}
         <div class="front-number metric-{{ metricClass }}-front">
    {% endif %}
            <span title={{ metricClass }}>
            {{depTrackLink(depTrackUri, metricVal, uuid, arg)}}
            </span>
         </div>
{% endmacro %}

{#
macro to create a unique sorted list of values for a given field in a collection:
- collection: the array to loop over (ex. "documents")
- field: the nested property to extract unique values from (ex "-----.gitInfo.owner")

The sorted list is saved into a global variable "uniqueSortedValues"
which allows this macro to be reused to create dropdown or radiobutton filters
 #}

{% macro getListUniqueValues(collection, field) %}
   {% set uniqueValues = [] %}

   {% for item in collection %}
     {# split the field into keys  (ex. "gitInfo.owner" ==>  ["gitInfo", "owner"]) #}
      {% set keys = field.split('.') %}
      {% set value = item %}
      {% for key in keys %}
            {% if value[key] is defined %}
               {% set value = value[key] %}
            {% else %}
               {% set value = '' %}
            {% endif %}
      {% endfor %}

      {% if value and value not in uniqueValues %}
            {% set _ = uniqueValues.push(value) %}
      {% endif %}
   {% endfor %}

   {# Sort the unique values #}
   {{ uniqueValues | sort | setGlobal('uniqueSortedValues') }}
{% endmacro %}


{#
macro to create a dropdown filter for a given field in a collection.
It uses the common macro 'getListUniqueValues' which sets the global var:
'global.uniqueSortedValues', so that this function can loop it over to create the options.

- collection: to forward to 'getListUniqueValues'
- field: to forward to 'getListUniqueValues'
- the unique id to assign to the resulting <select>

The select will have:
 - an "All" option (left always at 1st position)
 - one option for each unique value of the field in the collection
 - sorted values
 #}

{% macro dropdownFilter(collection, field, id) %}
   {% call getListUniqueValues(collection, field) %}{% endcall %}

   <!-- Generate options -->
   <select class="header-select" id="{{ id }}">
        <option value="All">All</option>
        {% for value in getGlobal('uniqueSortedValues') %}
            <option value="{{ value }}">{{ value }}</option>
        {% endfor %}
   </select>
{% endmacro %}
